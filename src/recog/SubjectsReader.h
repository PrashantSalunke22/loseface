// Lose Face - An open source face recognition project
// Copyright (C) 2008-2009 David Capello
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// * Redistributions of source code must retain the above copyright
//   notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer in
//   the documentation and/or other materials provided with the
//   distribution.
// * Neither the name of the authors nor the names of its contributors
//   may be used to endorse or promote products derived from this
//   software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
// OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef LOSEFACE_RECOG_SUBJECTSREADER_H
#define LOSEFACE_RECOG_SUBJECTSREADER_H

#include <cstdio>
#include <stdexcept>
#include "recog/Subject.h"
#include "recog/recog_util.h"
#include "util.h"

namespace recog {

  /// Abstract class to read a data base of images/faces.
  ///
  class SubjectsReader
  {
  public:
    virtual ~SubjectsReader() { }
    virtual int getSubjectCount() = 0;
    virtual SubjectPtr readSubject(int n) = 0;
    virtual int getImageWidth() const = 0;
    virtual int getImageHeight() const = 0;
  };

  typedef SharedPtr<SubjectsReader> SubjectsReaderPtr;

  /// Reads the Olivetti data base.
  /// 
  class OlivettiReader : public SubjectsReader
  {
    std::string m_facesDirectory;
    int m_subjectCount;

  public:

    /// Reads the Olivetti data base.
    /// 
    /// @param facesDirectory
    ///   Directory where are located s1, s2, ... folders.
    /// 
    /// @param count
    ///   Indicate how many subjects should be loaded (0 to load all subjects).
    /// 
    OlivettiReader(const std::string& facesDirectory, int count = 0)
      : m_facesDirectory(facesDirectory)
    {
      for (m_subjectCount=0;
	   count == 0 || m_subjectCount<count;
	   ++m_subjectCount) {
	std::string pgmName = m_facesDirectory;
	pgmName += "/s";
	pgmName += lexical_cast(m_subjectCount+1);
	pgmName += "/1.pgm";

	if (!file_exists(pgmName))
	  break;
      }
    }

    virtual int getSubjectCount() {
      return m_subjectCount;
    }
    
    virtual SubjectPtr readSubject(int n) {
      SubjectPtr subject(new Subject(n+1));

      for (int faceNumber=1; ; ++faceNumber) {
	std::string pgmName = m_facesDirectory;
	pgmName += "/s";
	pgmName += lexical_cast(n+1);
	pgmName += "/";
	pgmName += lexical_cast(faceNumber);
	pgmName += ".pgm";

	ImagePtr image(load_pgm(pgmName));
	if (image != NULL)
	  subject->addImage(image);
	else
	  break;
      }

      return subject;
    }

    virtual int getImageWidth() const { return 92; }
    virtual int getImageHeight() const { return 112; }

  };

  /// Reads the SINC/CIDISI data base.
  /// 
  class SincidisiReader : public SubjectsReader
  {
    std::string m_facesDirectory;
    int m_subjectCount;

    static const char** get_file_list(int n) {
      static const char* files001[] = {
	"001/080829_172631",
	"001/080829_172638",
	"001/080829_172655",
	"001/080829_172707",
	"001/080829_172722",
	"001/080829_172853",
	"001/080901_093938",
	"001/080902_124925",
	"001/080904_110514",
	"001/080904_175018",
	"001/080909_114820",
	"001/080916_141156",
	"001/080916_141205",
	"001/080916_141227",
	"001/081003_172624",
	"001/081003_172626",
	"001/081003_172628",
	"001/081003_172633",
	"001/081003_172634",
	"001/081003_172636",
	"001/081003_172641",
	"001/081003_172642",
	"001/081003_172645",
	"001/081003_172648",
	"001/081003_172653",
	"001/081003_172700",
	"001/081003_172702",
	"001/081003_172704",
	"001/081003_173418",
	"001/081003_173428",
	"001/081003_173434",
	"001/081006_165520",
	"001/081006_165527",
	"001/081006_165535",
	"001/081006_165539",
	"001/081006_165612",
	"001/081006_165620",
	"001/081006_165703",
	"001/081006_165717",
	"001/081006_165951",
	"001/081006_165955",
	NULL
      };
      static const char* files002[] = {
	"002/080829_173208",
	"002/080829_173218",
	"002/080829_173225",
	"002/080829_173238",
	"002/080829_173243",
	"002/080829_173251",
	"002/080829_173303",
	"002/080829_173318",
	"002/080904_160539",
	"002/080904_160549",
	"002/080904_160554",
	"002/080904_160602",
	"002/080905_153936",
	"002/080905_153943",
	"002/080905_153950",
	"002/081003_115324",
	"002/081003_115329",
	"002/081003_115336",
	"002/081003_115339",
	"002/081003_115349",
	"002/081003_115351",
	"002/081003_115357",
	"002/081003_115408",
	NULL
      };
      static const char* files003[] = {
	"003/080901_110141",
	"003/080901_111445",
	"003/080901_111452",
	"003/080901_111505",
	"003/080902_150317",
	"003/080902_150322",
	"003/080902_150329",
	"003/080902_150343",
	"003/080904_160435",
	"003/080904_160444",
	"003/080904_160509",
	"003/080904_160518",
	"003/080905_154013",
	"003/080905_154018",
	"003/080905_154028",
	"003/080905_154034",
	"003/080909_124708",
	"003/080909_124716",
	"003/080909_124730",
	"003/080916_141603",
	"003/080916_141609",
	"003/080916_141624",
	"003/080917_134445",
	"003/080917_134511",
	"003/080926_130005",
	"003/080926_130012",
	"003/080929_135738",
	"003/080929_135742",
	"003/080929_135751",
	"003/081002_135820",
	"003/081002_135833",
	"003/081002_135904",
	"003/081002_135930",
	NULL
      };
      static const char* files004[] = {
	"004/080901_110351",
	"004/080901_111541",
	"004/080901_111559",
	"004/080901_111621",
	"004/080902_160447",
	"004/080902_160456",
	"004/080904_161743",
	"004/080904_161754",
	"004/080905_153546",
	"004/080905_153550",
	"004/080909_114906",
	"004/080909_114916",
	"004/080909_114926",
	"004/080909_114930",
	"004/080916_141946",
	"004/080916_141950",
	"004/080929_102103",
	"004/080929_102156",
	"004/080929_102159",
	"004/081002_135306",
	"004/081002_135312",
	"004/081002_135318",
	"004/081002_135400",
	"004/081002_135408",
	"004/081002_165635",
	"004/081006_173015",
	"004/081006_173018",
	"004/081006_173022",
	NULL
      };
      static const char* files005[] = {
	"005/080901_111312",
	"005/080901_111323",
	"005/080901_111406",
	"005/081002_184007",
	"005/081002_184008",
	"005/081002_184010",
	"005/081002_184013",
	"005/081002_184015",
	"005/081002_184016",
	"005/081002_184018",
	"005/081002_184019",
	"005/081002_184033",
	"005/081002_184034",
	"005/081002_184035",
	"005/081002_184037",
	"005/081002_184039",
	"005/081002_184040",
	"005/081002_184041",
	"005/081002_184043",
	"005/081002_184044",
	"005/081002_184045",
	"005/081002_184046",
	"005/081002_184047",
	"005/081002_184048",
	"005/081002_184050",
	"005/081002_184051",
	"005/081002_184052",
	"005/081002_184106",
	"005/081002_184107",
	"005/081002_184108",
	"005/081002_184109",
	"005/081002_184110",
	"005/081002_184111",
	"005/081002_184112",
	"005/081002_184114",
	"005/081002_184115",
	"005/081002_184117",
	"005/081002_184118",
	"005/081002_184119",
	"005/081002_184120",
	"005/081002_184122",
	"005/081002_184123",
	"005/081002_184124",
	"005/081002_184720",
	"005/081002_184733",
	"005/081002_184743",
	"005/081002_184756",
	"005/081002_184803",
	"005/081002_184815",
	"005/081002_184839",
	"005/081002_184927",
	"005/081002_184928",
	"005/081002_184931",
	"005/081002_184933",
	"005/081002_184935",
	"005/081002_184937",
	"005/081002_184938",
	"005/081002_184941",
	"005/081002_184947",
	"005/081002_184948",
	"005/081002_184950",
	"005/081002_184954",
	"005/081002_184959",
	"005/081002_185001",
	"005/081002_185007",
	"005/081002_185036",
	"005/081002_185037",
	"005/081002_185039",
	"005/081002_185040",
	"005/081002_185041",
	"005/081002_185042",
	"005/081002_185043",
	"005/081002_185044",
	"005/081002_185045",
	"005/081002_185046",
	"005/081002_185047",
	"005/081002_185048",
	"005/081002_185049",
	"005/081002_185050",
	"005/081002_185053",
	"005/081002_185054",
	"005/081002_185055",
	"005/081002_185056",
	"005/081002_185057",
	"005/081002_185058",
	"005/081002_185059",
	"005/081002_185100",
	"005/081002_185101",
	"005/081002_185102",
	"005/081002_185103",
	"005/081002_185104",
	"005/081002_185109",
	"005/081002_185110",
	"005/081002_185111",
	"005/081002_185112",
	"005/081002_185113",
	"005/081002_185114",
	"005/081002_185115",
	"005/081002_185116",
	"005/081002_185117",
	"005/081002_185118",
	"005/081002_185119",
	"005/081002_185120",
	"005/081002_185121",
	"005/081002_185122",
	"005/081002_185123",
	"005/081002_185124",
	"005/081002_185125",
	"005/081002_185126",
	"005/081002_185127",
	"005/081002_185139",
	"005/081002_185141",
	"005/081002_185142",
	"005/081002_185143",
	"005/081002_185144",
	"005/081002_185145",
	"005/081002_185146",
	"005/081002_185147",
	"005/081002_185148",
	"005/081002_185149",
	"005/081002_185150",
	"005/081002_185159",
	"005/081002_185200",
	"005/081002_185201",
	"005/081002_185202",
	"005/081002_185203",
	"005/081002_185204",
	"005/081002_185205",
	"005/081002_185206",
	"005/081002_185207",
	"005/081002_185222",
	"005/081002_185223",
	"005/081002_185225",
	"005/081002_185227",
	"005/081002_185439",
	"005/081002_185442",
	"005/081002_185447",
	"005/081002_185458",
	"005/081002_185503",
	"005/081002_185504",
	"005/081002_185507",
	"005/081002_185509",
	"005/081002_185512",
	"005/081002_185515",
	"005/081002_185517",
	"005/081002_185519",
	"005/081002_185548",
	"005/081002_185550",
	"005/081002_185552",
	"005/081002_185553",
	"005/081002_185555",
	"005/081002_185624",
	"005/081002_185627",
	"005/081002_185631",
	"005/081002_185632",
	"005/081002_185634",
	"005/081002_185635",
	"005/081002_185641",
	"005/081002_185645",
	"005/081002_185648",
	"005/081002_185650",
	"005/081002_185651",
	"005/081002_185653",
	"005/081002_185654",
	"005/081002_185655",
	"005/081002_185704",
	"005/081002_185710",
	"005/081002_185711",
	"005/081002_185713",
	"005/081002_185715",
	"005/081002_185718",
	"005/081002_185722",
	"005/081002_185744",
	"005/081002_185749",
	"005/081002_185753",
	"005/081002_185758",
	"005/081002_185804",
	"005/081002_185823",
	"005/081002_185825",
	"005/081002_185839",
	"005/081002_185841",
	"005/081002_185847",
	"005/081002_185855",
	"005/081002_185856",
	"005/081002_185857",
	"005/081002_185906",
	"005/081002_185908",
	"005/081002_185909",
	"005/081002_185925",
	"005/081002_185926",
	"005/081002_185927",
	"005/081002_185929",
	"005/081002_190058",
	"005/081002_190105",
	"005/081002_190120",
	NULL
      };
      static const char* files006[] = {
	"006/080901_123038",
	"006/080901_123053",
	"006/080901_123103",
	"006/080901_123107",
	"006/080901_123117",
	"006/080901_123128",
	"006/080916_141742",
	"006/080916_141749",
	"006/080916_141752",
	"006/080916_141754",
	"006/080916_141757",
	"006/080916_141806",
	"006/080916_141815",
	"006/081002_140038",
	"006/081002_140046",
	"006/081002_140052",
	"006/081002_140059",
	"006/081002_140103",
	"006/081002_140108",
	NULL
      };
      static const char* files007[] = {
	"007/080901_153852",
	"007/080901_153901",
	"007/081003_134828",
	"007/081003_134830",
	"007/081003_134832",
	"007/081003_134833",
	"007/081003_134835",
	"007/081003_134838",
	"007/081003_134839",
	"007/081003_134847",
	"007/081003_134902",
	NULL
      };
      static const char* files008[] = {
	"008/080901_171617",
	"008/080901_171624",
	"008/080901_171643",
	"008/080901_171658",
	"008/080902_170822",
	"008/080917_160858",
	"008/080917_160909",
	NULL
      };
      static const char* files009[] = {
	"009/080902_161342",
	"009/080902_161346",
	NULL
      };
      static const char* files010[] = {
	"010/080905_153344",
	NULL
      };
      static const char* files011[] = {
	"011/080829_170310",
	"011/080829_170327",
	"011/080829_170339",
	"011/080829_170353",
	"011/080829_170432",
	"011/080829_170502",
	"011/080829_170721",
	"011/080829_170729",
	"011/080829_170745",
	"011/080829_170807",
	"011/080829_170902",
	"011/080829_170913",
	"011/080829_170924",
	"011/081006_204329",
	"011/081006_204354",
	"011/081006_204359",
	"011/081006_204407",
	"011/081006_204414",
	"011/081006_204423",
	"011/081006_204433",
	"011/081006_204441",
	"011/081006_204452",
	"011/081006_204500",
	"011/081006_204612",
	"011/081006_204619",
	"011/081006_204636",
	"011/081006_204649",
	"011/081006_204845",
	"011/081006_204934",
	"011/081006_204935",
	"011/081006_205304",
	NULL
      };
      static const char* files012[] = {
	"012/080829_164720",
	"012/080829_164911",
	"012/080829_170034",
	"012/080829_170124",
	"012/080829_170130",
	"012/080829_170136",
	"012/080829_170148",
	"012/080829_170204",
	"012/080829_170219",
	"012/080829_170226",
	"012/080829_170236",
	"012/080829_170242",
	"012/080829_170249",
	"012/080829_171148",
	"012/080829_171749",
	"012/080829_172059",
	"012/080829_172106",
	NULL
      };
      static const char* files013[] = {
	"013/081016_184330",
	"013/081016_185130",
	"013/081016_185145",
	"013/081016_185157",
	"013/081016_185222",
	"013/081016_185232",
	"013/081016_190236",
	"013/081016_190248",
	"013/081016_190259",
	"013/081016_190323",
	"013/081016_190332",
	"013/081016_190339",
	"013/081016_190356",
	"013/081016_190406",
	"013/081017_112847",
	"013/081017_113123",
	"013/081017_113132",
	"013/081017_113138",
	"013/081017_113151",
	"013/081017_113157",
	"013/081017_113207",
	"013/081017_113224",
	"013/081017_113246",
	"013/081017_113805",
	"013/081017_113818",
	"013/081022_133424",
	"013/081022_133432",
	"013/081022_133442",
	"013/081022_133508",
	"013/081022_133520",
	"013/081022_133536",
	"013/081022_133541",
	"013/081022_133544",
	"013/081022_133546",
	"013/081022_133549",
	"013/081022_133616",
	"013/081022_133636",
	"013/081022_133645",
	NULL
      };
      static const char* files014[] = {
	"014/081016_190013",
	"014/081016_190022",
	"014/081016_190026",
	"014/081016_190028",
	"014/081016_190058",
	"014/081016_190102",
	"014/081016_190121",
	"014/081016_190802",
	"014/081016_190804",
	"014/081016_191559",
	"014/081016_191601",
	"014/081016_191602",
	"014/081016_191950",
	"014/081016_191951",
	"014/081016_192041",
	"014/081020_123654",
	"014/081020_123717",
	"014/081020_123722",
	"014/081020_123735",
	"014/081020_123743",
	"014/081021_183400",
	"014/081021_183402",
	"014/081021_183405",
	"014/081022_141336",
	"014/081022_141341",
	"014/081022_141343",
	"014/081022_141345",
	"014/081022_141346",
	"014/081022_141348",
	"014/081022_141349",
	"014/081022_141352",
	"014/081022_141355",
	"014/081022_141359",
	"014/081023_162002",
	"014/081023_162006",
	"014/081023_162012",
	"014/081023_162015",
	NULL
      };
      static const char* files015[] = {
	"015/081016_190147",
	"015/081016_190151",
	"015/081016_190217",
	"015/081023_094916",
	"015/081023_094922",
	"015/081023_094926",
	"015/081023_094941",
	"015/081023_095007",
	"015/081023_095012",
	NULL
      };
      static const char* files016[] = {
	"016/081017_130610",
	"016/081017_130630",
	NULL
      };
      static const char* files017[] = {
	"017/081017_143844",
	"017/081017_143936",
	"017/081017_143942",
	"017/081017_144010",
	"017/081017_144032",
	"017/081017_144058",
	"017/081017_144124",
	"017/081017_144229",
	"017/081017_144242",
	"017/081017_144315",
	"017/081017_144336",
	"017/081017_144347",
	"017/081017_144356",
	"017/081017_144404",
	"017/081017_144408",
	"017/081017_144412",
	"017/081017_144428",
	"017/081017_144432",
	"017/081017_144458",
	"017/081017_144503",
	"017/081017_144507",
	"017/081017_144611",
	"017/081017_144615",
	"017/081017_144621",
	"017/081017_144632",
	"017/081017_144637",
	"017/081023_094705",
	"017/081023_094722",
	"017/081023_094726",
	"017/081023_094732",
	"017/081023_094739",
	"017/081023_094743",
	"017/081023_094748",
	"017/081023_094752",
	"017/081023_094803",
	"017/081023_094810",
	"017/081023_094820",
	"017/081023_123109",
	"017/081023_123128",
	"017/081023_123228",
	"017/081023_123253",
	"017/081023_123258",
	NULL
      };
      static const char* files018[] = {
	"018/081020_152050",
	"018/081020_152110",
	NULL
      };
      static const char* files019[] = {
	"019/081020_152314",
	"019/081020_152351",
	"019/081020_152404",
	NULL
      };
      static const char* files020[] = {
	"020/081021_183323",
	"020/081021_183332",
	"020/081021_183338",
	"020/081021_183342",
	NULL
      };
      static const char* files021[] = {
	"021/081022_161416",
	"021/081022_161440",
	"021/081022_161450",
	NULL
      };
      static const char** files[] = {
	files001, files002, files003, files004,	files005,
	files006, files007, files008, files009, files010,
	files011, files012, files013, files014, files015,
	files016, files017, files018, files019, files020,
	files021
      };
      assert(n >= 1 && n <= 21);
      return files[n-1];
    }

  public:

    /// Reads the SINC/CIDISI data base.
    /// 
    /// @param facesDirectory
    ///   Directory where are '001', '002', etc.
    /// 
    SincidisiReader(const std::string& facesDirectory)
      : m_facesDirectory(facesDirectory)
    {
      m_subjectCount = 0;
      for (int i=1; i<=21; ++i) {
	const char** files = get_file_list(i);
	std::string fn = m_facesDirectory + "/" + files[0] + "-face.pgm";
	if (file_exists(fn))
	  ++m_subjectCount;
      }
    }

    virtual int getSubjectCount() {
      return m_subjectCount;
    }

    virtual SubjectPtr readSubject(int n) {
      const char** files;
      SubjectPtr subject;
      
    restart:
      files = get_file_list(n+1);

      for (int j=0; files[j]; ++j) {
	std::string fn = m_facesDirectory + "/" + files[j] + "-face.pgm";

	ImagePtr image(load_pgm(fn));
	if (!image) {
	  if (subject != NULL || n+1 == 21)
	    break;

	  ++n;
	  goto restart;
	}

	if (subject == NULL)
	  subject.reset(new Subject(n+1));

	subject->addImage(image);
      }

      return subject;
    }

    virtual int getImageWidth() const { return 92; }
    virtual int getImageHeight() const { return 112; }

  };

  /// Tries to read images from well-known data bases.
  ///
  /// @see OlivettiReader, SincidisiReader
  ///
  class MixedReader : public SubjectsReader
  {
    SubjectsReaderPtr m_reader;
  public:

    MixedReader(const std::string& facesDirectory) {
      m_reader.reset(new OlivettiReader(facesDirectory));
      if (m_reader->getSubjectCount() == 0) {
	m_reader.reset(new SincidisiReader(facesDirectory));
	if (m_reader->getSubjectCount() == 0)
	  throw std::invalid_argument("Can't found a known face DB");
      }
    }

    virtual int getSubjectCount() { return m_reader->getSubjectCount(); }
    virtual SubjectPtr readSubject(int n) { return m_reader->readSubject(n); }
    virtual int getImageWidth() const { return m_reader->getImageWidth(); }
    virtual int getImageHeight() const { return m_reader->getImageHeight(); }
  };

} // namespace recog

#endif // LOSEFACE_RECOG_SUBJECTSREADER_H
